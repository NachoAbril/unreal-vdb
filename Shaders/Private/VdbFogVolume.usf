// Copyright 2022 Eidos-Montreal / Eidos-Sherbrooke

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http ://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"
#include "/Engine/Private/ReflectionEnvironmentShared.ush"

#include "/Plugin/VdbVolume/Private/VdbCommon.ush"

float DensityMult;
float StepMultiplier;
StructuredBuffer<uint>	VdbBuffer;

//-----------------------------------------------------------------------------------------------------------
// Unreal Volumetric Material specific
//-----------------------------------------------------------------------------------------------------------

half3 SampleExtinctionCoefficients(in FPixelMaterialInputs PixelMaterialInputs)
{
	half3 Extinction = 1.0f;
	Extinction = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs).rgb;
	return clamp(Extinction, 0.0f, 65000.0f);
}

half3 SampleEmissive(in FPixelMaterialInputs PixelMaterialInputs)
{
	half3 EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);
	return clamp(EmissiveColor, 0.0f, 65000.0f);
}

half3 SampleAlbedo(in FPixelMaterialInputs PixelMaterialInputs)
{
	float3 Albedo = 0.5f;
#if !MATERIAL_SHADINGMODEL_UNLIT
	Albedo = GetMaterialBaseColor(PixelMaterialInputs) * View.DiffuseOverrideParameter.w + View.DiffuseOverrideParameter.xyz;
#endif
	return saturate(Albedo);
}

half SampleAmbientOcclusion(in FPixelMaterialInputs PixelMaterialInputs)
{
	half AO = GetMaterialAmbientOcclusion(PixelMaterialInputs);
	return AO;
}

//-----------------------------------------------------------------------------------------------------------
// Tracing through a NanoVDB volume
//-----------------------------------------------------------------------------------------------------------

float4 RaymarchFogVolume(
	pnanovdb_buf_t buf,
	pnanovdb_uint32_t grid_type,
	pnanovdb_readaccessor_t acc,
	pnanovdb_vec3_t bbox_min,
	pnanovdb_vec3_t bbox_max,

	VdbRay Ray,
	HeterogenousMedium Medium,
	RandomSequence RandSequence,
	FMaterialPixelParameters MaterialParameters,
	float4x4 LocalToWorld,
	float4x4 WorldToLocal,
	float4 SvPosition)
{
	pnanovdb_address_t address; address.byte_offset = 0;
	pnanovdb_grid_handle_t grid; grid.address = address;

	// ------------------------------------------------------------------------------------------------------
	// Test against volume, and update Ray start/end to fit volume

	pnanovdb_bool_t Hit = pnanovdb_hdda_ray_clip(bbox_min, bbox_max, Ray.Origin, Ray.TMin, Ray.Direction, Ray.TMax);
	if (!Hit)
		return float4(0.0, 0.0, 0.0, 0.0);

	// ------------------------------------------------------------------------------------------------------
	// Speed up empty space traversal, and get accurate first intersection

	float Val = 0;
	if (!GetFirstIntersection(grid_type, buf, acc, Ray, Val, Medium))
		return float4(0.0, 0.0, 0.0, 0.0);

	float Transmittance = 1.f;
	float3 Radiance = 0.0;

	// ------------------------------------------------------------------------------------------------------
	// Set up lighting

#if !MATERIAL_SHADINGMODEL_UNLIT
	float3 LightDir = WorldToIndexDirection(View.DirectionalLightDirection, WorldToLocal, buf, grid); // Index space
	float3 LightCol = View.DirectionalLightColor;

	// Compute fake ambient/environment lighting term
	float3 FirstHitPos = pnanovdb_hdda_ray_start(Ray.Origin, Ray.TMin, Ray.Direction); // Index space
	float3 BoxCenter = 0.5 * (bbox_max + bbox_min);
	float3 iPseudoDir = normalize(FirstHitPos - BoxCenter);
	float3 wPseudoDir = IndexToWorldDirection(iPseudoDir, LocalToWorld, buf, grid);
	float3 EnvLight = GetSkySHDiffuse(wPseudoDir) * ResolvedView.SkyLightColor.rgb;
#endif

	// ------------------------------------------------------------------------------------------------------
	// Raymarch, using ratio tracking

	float DensityMaxInv = 1.0f / Medium.densityMax;
	float DensityMaxInvMultStep = DensityMaxInv * StepMultiplier;
	float t = Ray.TMin;
	int Steps = 0;

	[loop]
	while (Steps++ < 10000) // hard-coded (but very high) limit in case we're not converging
	{
		t += DensityMaxInvMultStep * (RandomSequence_GenerateSample1D(RandSequence) + 0.5);
		if (t >= Ray.TMax)
			break;

		// Update coordinates
		pnanovdb_vec3_t iPos = pnanovdb_hdda_ray_start(Ray.Origin, t, Ray.Direction);
		float3 WorldPos = IndexToWorldPosition(iPos, LocalToWorld, buf, grid);
		float3 TranslatedWorldPosition = WorldPos + ResolvedView.RelativePreViewTranslation; // override world position

		// Sample VDB volume
		float Density = ReadValue(iPos, buf, grid_type, acc) * Medium.densityScale;

		// Sample Material at current Ray position.
		FPixelMaterialInputs PixelMaterialInputs;
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, SvPosition, true, TranslatedWorldPosition, TranslatedWorldPosition);
		half3 EmissiveColor = SampleEmissive(PixelMaterialInputs);
		half3 Extinction = SampleExtinctionCoefficients(PixelMaterialInputs);
		half3 Albedo = SampleAlbedo(PixelMaterialInputs);
		half AmbientOcclusion = SampleAmbientOcclusion(PixelMaterialInputs);

		// Use extinction parameter from Unreal material as a multiplier on VDB Density (arbitrary)
		Density *= Extinction.r;
		
		// Update Transmittance
		float StepTransmittance = Transmittance * Density * DensityMaxInv;
		Transmittance *= 1.0f - Density * DensityMaxInv;

		// Update total radiance
		if (Density > 0.0)
		{
			Radiance += StepTransmittance * EmissiveColor; // Emissive
#if !MATERIAL_SHADINGMODEL_UNLIT
			// Only support single directional lighting. Still really expensive.
			#ifndef IGNORE_DIR_LIGHT
			{
				VdbRay ShadowRay;
				ShadowRay.Origin = iPos; // Index space
				ShadowRay.Direction = LightDir; // Index space
				ShadowRay.TMin = 0.0001f;
				ShadowRay.TMax = POSITIVE_INFINITY;

				float ShadowTransmittance = GetTransmittance(bbox_min, bbox_max, ShadowRay, buf, grid_type, acc, Medium, 4.0 * StepMultiplier, RandSequence);
				Radiance += StepTransmittance * AmbientOcclusion * Albedo * ShadowTransmittance * LightCol;
			}
			#endif
			Radiance += StepTransmittance * AmbientOcclusion * Albedo * EnvLight; // Ambient
#endif
		}

		// Early quit as early as possible, to speed up rendering. Ideal value is 0.01.
		if (Transmittance < 0.4f)
		{
#if !MATERIAL_SHADINGMODEL_UNLIT
			Radiance += 0.4 * Albedo * EnvLight; // Artificially boosting missing ambient contribution
#endif
			Transmittance = 0.0;
			break;
		}
	}
	
	return float4(Radiance, 1.0 - Transmittance);
}

//-----------------------------------------------------------------------------------------------------------
//#if PIXELSHADER
//-----------------------------------------------------------------------------------------------------------

void MainPS(in INPUT_POSITION_QUALIFIERS float4 SvPosition : SV_Position, 
	in FVertexFactoryInterpolantsVSToPS FactoryInterpolants, 
	out float4 OutColor0 : SV_Target0
)
{
	ResolvedView = ResolveView();

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(FactoryInterpolants, SvPosition);

	uint PrimId = VertexFactoryGetPrimitiveId(FactoryInterpolants);
	float4x4 WorldToLocal = LWCHackToFloat(GetPrimitiveData(PrimId).WorldToLocal);
	float4x4 LocalToWorld = LWCHackToFloat(GetPrimitiveData(PrimId).LocalToWorld);

	float DeviceZ = VdbParams.SceneDepthTexture.Load(int3(SvPosition.xy, 0)).x; // backbuffer depth

	// ------------------------------------------------------------------------------------------------------
	// Prepare NanoVDB

	pnanovdb_address_t address; address.byte_offset = 0;
	pnanovdb_grid_handle_t grid; grid.address = address;

	pnanovdb_buf_t grid_buf = VdbBuffer;
	pnanovdb_tree_handle_t tree = pnanovdb_grid_get_tree(grid_buf, grid);
	pnanovdb_buf_t root_buf = VdbBuffer;
	pnanovdb_root_handle_t root = pnanovdb_tree_get_root(root_buf, tree);

	pnanovdb_uint32_t grid_type = pnanovdb_grid_get_grid_type(grid_buf, grid);
	float root_min_val = pnanovdb_read_float(root_buf, pnanovdb_root_get_min_address(grid_type, grid_buf, root));
	float root_max_val = pnanovdb_read_float(root_buf, pnanovdb_root_get_max_address(grid_type, grid_buf, root));

	pnanovdb_vec3_t bbox_min = pnanovdb_coord_to_vec3(pnanovdb_root_get_bbox_min(root_buf, root));
	pnanovdb_vec3_t bbox_max = pnanovdb_coord_to_vec3(pnanovdb_root_get_bbox_max(root_buf, root));

	pnanovdb_readaccessor_t acc;
	pnanovdb_readaccessor_init(acc, root);

	// ------------------------------------------------------------------------------------------------------
	// Prepare variables

	HeterogenousMedium Medium;
	Medium.densityScale = DensityMult;
	Medium.densityMin = root_min_val * Medium.densityScale;
	Medium.densityMax = root_max_val * Medium.densityScale;
	Medium.anisotropy = 0.0;
	Medium.albedo = 0.8;

	float4 Radiance = 0.0;

	uint LinearIndex = SvPosition.y * ResolvedView.BufferSizeAndInvSize.x + SvPosition.x;

	// ------------------------------------------------------------------------------------------------------
	// Trace rays and accumulate
	
	[loop]
	for (uint SampleIndex = 0; SampleIndex < VdbParams.SamplesPerPixel; ++SampleIndex)
	{
		RandomSequence RandSequence;
		RandomSequence_Initialize(RandSequence, LinearIndex, SampleIndex);

		float2 Jitter = 0; // RandomSequence_GenerateSample2D(RandSequence) - 0.5;
		VdbRay iRay = PrepareRayFromPixel(grid_buf, grid, SvPosition.xy, ResolvedView.BufferSizeAndInvSize.xy, Jitter, DeviceZ, WorldToLocal); // index/vdb space

#ifdef USER_DEFINED_FOG
		// User must provide this function in a custom node (HLSL) in Unreal material editor
		Radiance += UserDefined_NanoVdbSampling(grid_buf, grid_type, acc, bbox_min, bbox_max, iRay.Origin, iRay.TMin, iRay.Direction, iRay.TMax, Medium, RandSequence, MaterialParameters, LocalToWorld, WorldToLocal, SvPosition);
#else
		Radiance += RaymarchFogVolume(grid_buf, grid_type, acc, bbox_min, bbox_max, iRay, Medium, RandSequence, MaterialParameters, LocalToWorld, WorldToLocal, SvPosition);
#endif
	}

	Radiance /= VdbParams.SamplesPerPixel;

	if (Radiance.a == 0.0f)
	{
		discard;
	}

	OutColor0 = Radiance;
}